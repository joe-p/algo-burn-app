#pragma version 9

// This TEAL was generated by TEALScript v0.42.0
// https://github.com/algorand-devrel/TEALScript

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// optIntoASA(asset,pay)void
//
// Opt the contract into an ASA
// 
// @param mbrPayment The payment that covers the opt-in MBR for the contract
// @param asa The ASA to opt in to
abi_route_optIntoASA:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// asa: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute optIntoASA(asset,pay)void
	callsub optIntoASA
	int 1
	return

optIntoASA:
	proto 3 0

	// contracts/asa-burn-app.algo.ts:12
	// assert(!globals.currentApplicationAddress.hasAsset(asa))
	global CurrentApplicationAddress
	frame_dig -2 // asa: asset
	asset_holding_get AssetBalance
	swap
	pop
	!
	assert

	// contracts/asa-burn-app.algo.ts:13
	// assert(asa.clawback === globals.zeroAddress)
	frame_dig -2 // asa: asset
	asset_params_get AssetClawback
	assert
	global ZeroAddress
	==
	assert

	// contracts/asa-burn-app.algo.ts:15
	// preMBR = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_bury -3 // preMBR: uint64

	// contracts/asa-burn-app.algo.ts:17
	// sendAssetTransfer({
	//       assetReceiver: globals.currentApplicationAddress,
	//       xferAsset: asa,
	//       assetAmount: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/asa-burn-app.algo.ts:18
	// assetReceiver: globals.currentApplicationAddress
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/asa-burn-app.algo.ts:19
	// xferAsset: asa
	frame_dig -2 // asa: asset
	itxn_field XferAsset

	// contracts/asa-burn-app.algo.ts:20
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/asa-burn-app.algo.ts:23
	// verifyTxn(mbrPayment, {
	//       receiver: globals.currentApplicationAddress,
	//       amount: { greaterThanEqualTo: globals.currentApplicationAddress.minBalance - preMBR },
	//     })
	// verify receiver
	frame_dig -1 // mbrPayment: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // mbrPayment: pay
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_dig -3 // preMBR: uint64
	-
	>=
	assert
	retsub

abi_route_defaultTEALScriptCreate:
	int 1
	return

create_NoOp:
	txn NumAppArgs
	bz abi_route_defaultTEALScriptCreate
	err

call_NoOp:
	method "optIntoASA(pay,asset)void"
	txna ApplicationArgs 0
	match abi_route_optIntoASA
	err